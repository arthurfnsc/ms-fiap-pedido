buildscript {

    ext {

        aptVersion = "0.21"
        detektVersion = "1.12.0"
        dokkaVersion = "0.10.1"
        gradleVersionsVersion = "0.29.0"
        kotlinVersion = "1.4.0"
        markdownLintVersion = "0.6.0"
        openAPIGeneratorVersion = "4.3.0"
        ossIndexVersion = "0.4.11"
        owaspVersion = "6.0.1"
        pitestVersion = "1.5.1"
        sonarQubeVersion = "3.0"
        springBootVersion = "2.3.3.RELEASE"
        springDependencyVersion = "1.0.10.RELEASE"
    }
}

plugins {

    id "com.appmattus.markdown" version "$markdownLintVersion" apply false
    id "com.github.ben-manes.versions" version "$gradleVersionsVersion" apply false
    id 'info.solidsoft.pitest' version "$pitestVersion"
    id "io.gitlab.arturbosch.detekt" version "$detektVersion" apply false
    id "io.spring.dependency-management" version "$springDependencyVersion"
    id "net.ltgt.apt" version "$aptVersion"
    id "net.ossindex.audit" version "$ossIndexVersion" apply false
    id "org.jetbrains.dokka" version "$dokkaVersion" apply false
    id "org.jetbrains.kotlin.jvm" version "$kotlinVersion"
    id "org.jetbrains.kotlin.plugin.spring" version "$kotlinVersion"
    id "org.owasp.dependencycheck" version "$owaspVersion" apply false
    id "org.openapi.generator" version "$openAPIGeneratorVersion"
    id "org.sonarqube" version "$sonarQubeVersion" apply false
    id "org.springframework.boot" version "$springBootVersion"
}

ext {

    archUnitVersion = '0.14.1'
    assertJVersion = "3.17.1"
    gradleWrapperVersion = "6.6.1"
    jacksonDatabindNullableVersion = "0.2.1"
    jsonVersion = "1.1.4"
    junitVersion = "5.6.2"
    mapstructKotlinVersion = "1.4.0.0"
    mapstructVersion = "1.3.1.Final"
    mockitoVersion = "3.5.10"

    springFoxVersion = "3.0.0"

    kotlinGroup = "org.jetbrains.kotlin"
    springBootGroup = "org.springframework.boot"
    springFoxGroup = "io.springfox"

    libs = [
        kotlin : [
            "$kotlinGroup:kotlin-reflect",
            "$kotlinGroup:kotlin-stdlib-jdk8"
        ],
        openApiServer : [
            "org.openapitools:jackson-databind-nullable:$jacksonDatabindNullableVersion"
        ],
        springBoot : [
            "$springBootGroup:spring-boot-starter",
            "$springBootGroup:spring-boot-starter-data-mongodb-reactive",
            "$springBootGroup:spring-boot-starter-validation",
            "$springBootGroup:spring-boot-starter-webflux"
        ],
        springFox : [
            "$springFoxGroup:springfox-boot-starter:$springFoxVersion"
        ],
        unitTest : [
            "com.tngtech.archunit:archunit-junit5:$archUnitVersion",
            "org.assertj:assertj-core:$assertJVersion",
            "org.junit.jupiter:junit-jupiter-api:$junitVersion",
            "org.mockito:mockito-core:$mockitoVersion"
        ]
    ]
}

group = "br.com.fiap.mba.ms-pedido"
version = "0.0.1-SNAPSHOT"

apply from: "$rootDir/plugins/kotlin.gradle"
apply from: "$rootDir/plugins/docs.gradle"
apply from: "$rootDir/plugins/ides.gradle"
apply from: "$rootDir/plugins/jacoco.gradle"
apply from: "$rootDir/plugins/lint.gradle"
apply from: "$rootDir/plugins/mapstruct.gradle"
apply from: "$rootDir/plugins/openapi.gradle"
apply from: "$rootDir/plugins/security.gradle"
apply from: "$rootDir/plugins/sonarqube.gradle"

repositories {

    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {

    api "com.github.pozo:mapstruct-kotlin:$mapstructKotlinVersion"

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"

    kapt "com.github.pozo:mapstruct-kotlin-processor:$mapstructKotlinVersion"
    kapt "org.mapstruct:mapstruct-processor:$mapstructVersion"

    implementation libs.kotlin
    implementation libs.openApiServer
    implementation libs.springBoot
    implementation libs.springFox

    implementation "org.mapstruct:mapstruct:$mapstructVersion"

    testImplementation libs.unitTest

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
}

test {

    useJUnitPlatform()
}

pitest {

    avoidCallsTo = ["kotlin.jvm.internal", "org.slf4j"]
    junit5PluginVersion = '0.12'
    historyInputLocation = file("$buildDir/pitest")
    historyOutputLocation = file("$buildDir/pitest")
    jvmArgs = ['-Dspring.test.constructor.autowire.mode=all']
    mutators = ["STRONGER"]
    pitestVersion = '1.5.2'
    targetClasses = ['br.com.fiap.mba.*']

    if (project.name in ['application']) {
        failWhenNoMutations = false
    }
}

wrapper {

    gradleVersion = "$gradleWrapperVersion"
}
